//convert angle to a unit vectorfunction angle_to_vector(ang){    angle_in_radians = ang * Math.PI /180;    return {x: Math.cos(angle_in_radians), y: Math.sin(angle_in_radians)};}//random numberfunction gen_rnd(max){    return Math.floor(Math.random() * max);}//pick random direction using 0 (-ve) or 1 (+ve)function get_rnd_dir(max){    if(Math.round(Math.random()) === 0){        return gen_rnd(max) * -1;    }else{        return gen_rnd(max);    }}function doKeyDown(e){    switch(e.keyCode){        case 37:            //left-arrow            mySpaceship.dec_angle_vel();            break;        case 38:            //up-arrow (thrust)            mySpaceship.thrust = true;            break;        case 39:            //right-arrow            mySpaceship.inc_angle_vel();            break;        case 32:            //space (fire)            mySpaceship.fire();            break;        default:            console.log(e.keyCode);    }}function doKeyUp(e){    switch(e.keyCode){        case 37:    //left-arrow            mySpaceship.reset_angle_vel();            break;        case 38:    //thrust            mySpaceship.thrust = false;            break;        case 39:    //right-arrow            mySpaceship.reset_angle_vel();            break;        case 32:    //fire            break;        default:            console.log(e.keyCode);    }}//calc dist between two pointsfunction dist(p,q){    return Math.sqrt(Math.pow((p.x - q.x), 2) + Math.pow((p.y - q.y), 2));}Array.prototype.diff = function(a){    return this.filter(function(i) {        return (a.indexOf(i) < 0);    });};function group_collide(grp, sprite){    //asteroids, spaceship|bullet    result = false;    rm_set = [];        grp.forEach(function(member){        if (member.collide(sprite)){            result = true;            rm_set.push(member);        }    });        rm_set.forEach(function(m){        m.explode(grp); //explode the asteroid        grp.splice(grp.indexOf(m), 1);    });    return result;}function group_group_collide(grp1, grp2){ //bullet,asteroid    gg_result = 0;    rm_set = [];    //for removing after checking?        grp1.forEach(function(member){ //bullet        if (group_collide(grp2, member)){ //asteroid,bullet            gg_result += 1;            //rm_set.push(member);            grp1.splice(grp1.indexOf(member), 1);        }    });        //rm_set.forEach(function(member){    //    grp1.splice(grp1.indexOf(member), 1);    //});    return gg_result;}function preloader(srcArray, destArray){        var loadedimages=0;        srcArray=(typeof srcArray!="object")? [srcArray] : srcArray;                function imageloadpost(){            loadedimages++;            if (loadedimages == srcArray.length) {                return;            }        }        function imageloaderr(){            console.log('error loading ' + this.src);            imageloadpost();        }                for (var i=0; i<srcArray.length; i++) {            destArray[i] = new Image();            destArray[i].onload = imageloadpost;            destArray[i].onerror = imageloaderr;            destArray[i].src=srcArray[i];        }}var canvas = document.getElementById('canvas-space'),    ctx = canvas.getContext('2d');//images to preloadvar game_images = [],    img_names = ['images/shot2.png',            'images/double_ship.png',            'images/asteroid_blue.png',            'images/explosion_alpha.png'];            preloader(img_names, game_images);//create spaceship, bullets and asteroidsvar mySpaceship = new Spaceship(),    bullets = [],    asteroids = [],    explosions = [];//soundsvar snd_fire = new Audio('sounds/missile.ogg'),    snd_thrust = new Audio('sounds/thrust.ogg'),    snd_explosion = new Audio('sounds/explosion.ogg');//score and livesvar score = 0,    lives = 5;window.addEventListener("keydown", doKeyDown, false);window.addEventListener("keyup", doKeyUp, false);//spawn asteroidssetInterval(function(){    if (asteroids.length < 5){        var _asteroid = Asteroid({            pos: {x: gen_rnd(canvas.width), y: gen_rnd(canvas.height)},            vel: {x: get_rnd_dir(10)/10, y: get_rnd_dir(10)/10},            angle_vel: gen_rnd(5)        });        asteroids.push(_asteroid);    }}, 1000);//start the game loopvar FPS = 30;setInterval(function(){    update();    draw();}, 1000/FPS);//main update loopfunction update(){    mySpaceship.update();    bullets.forEach(function(bullet){        bullet.update();    });    asteroids.forEach(function(_asteroid){        _asteroid.update();    });    explosions.forEach(function(_explosion){        _explosion.update();    });    if (group_collide(asteroids, mySpaceship)){        lives -= 1;    }    hits = (group_group_collide(bullets, asteroids));    if (hits > 0){        score += hits;    }}//main draw loopfunction draw(){    ctx.clearRect(0,0, canvas.width, canvas.height);    mySpaceship.draw();    bullets.forEach(function(bullet){        bullet.draw();    });    asteroids.forEach(function(_asteroid){        _asteroid.draw();    });    explosions.forEach(function(_explosion){        _explosion.draw();    });    ctx.font= "20px Arial";    ctx.fillText("Score: " + score, 10, 30);    ctx.fillText("Lives: " + lives, canvas.width-85, 30)}